<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="sqlDataSource1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <data name="customSqlQuery1.Sql" xml:space="preserve">
    <value>SELECT 
	YearEmployeePayAnalysis.EmployeeFirstname,
	YearEmployeePayAnalysis.EmployeeName,
	Department.DepartmentDescription,
	Locations.Description as LocationDescription,
	Groups.GroupDescription,
	YearEmployeePayAnalysis.Location,
	YearEmployeePayAnalysis.GroupID,
	YearEmployeePayAnalysis.Department,
	YearEmployeePayAnalysis.BankID, 
	YearEmployeePayAnalysis.EmployeeID,
	YearPayAnalysis.PayTypeID, 
	YearPayAnalysis.AttrID,
	YearPayAnalysis.Tran_Date, 
	YearEmployeePayAnalysis.CurrencyID,
	CASE
    WHEN YearPayAnalysis.PayTypeID = 'BASIC' THEN
    YearPayAnalysis.Amount ELSE 0 END AS MONTHLYBASIC, CASE
    WHEN YearPayAnalysis.PayTypeID = 'HOUSING' THEN
    YearPayAnalysis.Amount ELSE 0 END AS RENT, CASE
    WHEN YearPayAnalysis.PayTypeID = 'TRANSPORT' THEN
    YearPayAnalysis.Amount ELSE 0 END AS TRANSPORT, CASE
    WHEN YearPayAnalysis.PayTypeID = 'UTILITY' THEN
    YearPayAnalysis.Amount ELSE 0 END AS UTILITY, CASE
    WHEN YearPayAnalysis.PayTypeID = 'MEAL' THEN
    YearPayAnalysis.Amount ELSE 0 END AS MEAL,  CASE
    WHEN YearPayAnalysis.PayTypeID = 'ENTERTAINMENT' THEN
    YearPayAnalysis.Amount ELSE 0 END AS ENTERTAINMENT, CASE
    WHEN YearPayAnalysis.PayTypeID = 'MEDICAL' THEN
    YearPayAnalysis.Amount ELSE 0 END AS MEDICAL, CASE
    WHEN YearPayAnalysis.PayTypeID = 'TAX' THEN
    YearPayAnalysis.Amount ELSE 0 END AS TAX,  CASE
    WHEN YearPayAnalysis.PayTypeID = 'PENSION' THEN
    YearPayAnalysis.Amount ELSE 0 END AS PENSION,
 CASE WHEN 
YearPayAnalysis.AttrID='P' AND 
(YearPayAnalysis.PayTypeID &lt;&gt; 'BASIC' AND 
YearPayAnalysis.PayTypeID &lt;&gt; 'HOUSING' AND
YearPayAnalysis.PayTypeID &lt;&gt; 'TRANSPORT' AND
YearPayAnalysis.PayTypeID &lt;&gt; 'UTILITY' AND
YearPayAnalysis.PayTypeID &lt;&gt; 'ENTERTAINMENT' AND
YearPayAnalysis.PayTypeID &lt;&gt; 'MEDICAL' AND
YearPayAnalysis.PayTypeID &lt;&gt; 'MEAL') THEN
YearPayAnalysis.Amount ELSE 0 END AS OTHERPAY,
CASE WHEN 
YearPayAnalysis.AttrID='D' AND 
(YearPayAnalysis.PayTypeID &lt;&gt; 'TAX' AND
YearPayAnalysis.PayTypeID &lt;&gt; 'PENSION' ) THEN
YearPayAnalysis.Amount ELSE 0 END AS OTHERDED,
CASE WHEN YearPayAnalysis.AttrID='P' THEN
YearPayAnalysis.Amount ELSE 0 END AS TOTAL,
CASE WHEN YearPayAnalysis.AttrID='D' THEN
YearPayAnalysis.Amount ELSE 0 END AS TOTALDED
,C.Name, IsNull(C.Address1, '') + ' ' + IsNull(C.Address2, '') + ' ' + IsNull(C.Address3, '') + ' ' + IsNull(C.City, '') + ' ' + IsNull(C.State, '') + ' ' + IsNull(C.Country, '') As CompanyFullAddress,
      C.LogoURL

FROM 
  YearEmployeePayAnalysis 
 INNER JOIN
  Company C
ON 
  C.Company =YearEmployeePayAnalysis.Company AND 
  C.Branch =YearEmployeePayAnalysis.Branch
  INNER JOIN
  YearPayAnalysis ON 
  YearPayAnalysis.Company =YearEmployeePayAnalysis.Company AND 
  YearPayAnalysis.Branch =YearEmployeePayAnalysis.Branch AND 
  YearPayAnalysis.EmployeeID =YearEmployeePayAnalysis.EmployeeID  AND
Month(YearPayAnalysis.Tran_Date)=Month(YearEmployeePayAnalysis.Tran_Date) AND
Year(YearPayAnalysis.Tran_Date)=Year(YearEmployeePayAnalysis.Tran_Date)
    
LEFT OUTER JOIN

    Locations ON 
    Locations.Company = YearEmployeePayAnalysis.Company AND
    Locations.Branch = YearEmployeePayAnalysis.Branch AND
    Locations.LocationID  = YearEmployeePayAnalysis.Location 
LEFT OUTER JOIN
    Department ON 
    Department.Company = YearEmployeePayAnalysis.Company AND
    Department.Branch = YearEmployeePayAnalysis.Branch AND
    Department.DepartmentID = YearEmployeePayAnalysis.Department 
LEFT OUTER JOIN
    Groups ON 
    Groups.Company = YearEmployeePayAnalysis.Company AND
    Groups.Branch = YearEmployeePayAnalysis.Branch AND
    Groups.GroupID = YearEmployeePayAnalysis.GroupID   
    

WHERE 
--YearEmployeePayAnalysis.Company = @Company AND 
--YearEmployeePayAnalysis.Branch =@Branch AND 
MONTH(YearPayAnalysis.Tran_Date) = MONTH(@Period) AND 
YEAR(YearPayAnalysis.Tran_Date) = YEAR(@Period) AND
YearPayAnalysis.OnPayroll = 1 AND 
YearPayAnalysis.ActiveYN=1 AND
(YearEmployeePayAnalysis.ActiveYN=1 or YearEmployeePayAnalysis.ActiveYN=0)</value>
  </data>
  <data name="sqlDataSource1.ResultSchemaSerializable" xml:space="preserve">
    <value>PERhdGFTZXQgTmFtZT0ic3FsRGF0YVNvdXJjZTEiPjxWaWV3IE5hbWU9IlF1ZXJ5Ij48RmllbGQgTmFtZT0iRW1wbG95ZWVGaXJzdG5hbWUiIFR5cGU9IlN0cmluZyIgLz48RmllbGQgTmFtZT0iRW1wbG95ZWVOYW1lIiBUeXBlPSJTdHJpbmciIC8+PEZpZWxkIE5hbWU9IkRlcGFydG1lbnREZXNjcmlwdGlvbiIgVHlwZT0iU3RyaW5nIiAvPjxGaWVsZCBOYW1lPSJMb2NhdGlvbkRlc2NyaXB0aW9uIiBUeXBlPSJTdHJpbmciIC8+PEZpZWxkIE5hbWU9Ikdyb3VwRGVzY3JpcHRpb24iIFR5cGU9IlN0cmluZyIgLz48RmllbGQgTmFtZT0iTG9jYXRpb24iIFR5cGU9IlN0cmluZyIgLz48RmllbGQgTmFtZT0iR3JvdXBJRCIgVHlwZT0iU3RyaW5nIiAvPjxGaWVsZCBOYW1lPSJEZXBhcnRtZW50IiBUeXBlPSJTdHJpbmciIC8+PEZpZWxkIE5hbWU9IkJhbmtJRCIgVHlwZT0iU3RyaW5nIiAvPjxGaWVsZCBOYW1lPSJFbXBsb3llZUlEIiBUeXBlPSJTdHJpbmciIC8+PEZpZWxkIE5hbWU9IlBheVR5cGVJRCIgVHlwZT0iU3RyaW5nIiAvPjxGaWVsZCBOYW1lPSJBdHRySUQiIFR5cGU9IlN0cmluZyIgLz48RmllbGQgTmFtZT0iVHJhbl9EYXRlIiBUeXBlPSJEYXRlVGltZSIgLz48RmllbGQgTmFtZT0iQ3VycmVuY3lJRCIgVHlwZT0iU3RyaW5nIiAvPjxGaWVsZCBOYW1lPSJNT05USExZQkFTSUMiIFR5cGU9IkRvdWJsZSIgLz48RmllbGQgTmFtZT0iUkVOVCIgVHlwZT0iRG91YmxlIiAvPjxGaWVsZCBOYW1lPSJUUkFOU1BPUlQiIFR5cGU9IkRvdWJsZSIgLz48RmllbGQgTmFtZT0iVVRJTElUWSIgVHlwZT0iRG91YmxlIiAvPjxGaWVsZCBOYW1lPSJNRUFMIiBUeXBlPSJEb3VibGUiIC8+PEZpZWxkIE5hbWU9IkVOVEVSVEFJTk1FTlQiIFR5cGU9IkRvdWJsZSIgLz48RmllbGQgTmFtZT0iTUVESUNBTCIgVHlwZT0iRG91YmxlIiAvPjxGaWVsZCBOYW1lPSJUQVgiIFR5cGU9IkRvdWJsZSIgLz48RmllbGQgTmFtZT0iUEVOU0lPTiIgVHlwZT0iRG91YmxlIiAvPjxGaWVsZCBOYW1lPSJPVEhFUlBBWSIgVHlwZT0iRG91YmxlIiAvPjxGaWVsZCBOYW1lPSJPVEhFUkRFRCIgVHlwZT0iRG91YmxlIiAvPjxGaWVsZCBOYW1lPSJUT1RBTCIgVHlwZT0iRG91YmxlIiAvPjxGaWVsZCBOYW1lPSJUT1RBTERFRCIgVHlwZT0iRG91YmxlIiAvPjxGaWVsZCBOYW1lPSJOYW1lIiBUeXBlPSJTdHJpbmciIC8+PEZpZWxkIE5hbWU9IkNvbXBhbnlGdWxsQWRkcmVzcyIgVHlwZT0iU3RyaW5nIiAvPjxGaWVsZCBOYW1lPSJMb2dvVVJMIiBUeXBlPSJTdHJpbmciIC8+PC9WaWV3PjwvRGF0YVNldD4=</value>
  </data>
</root>