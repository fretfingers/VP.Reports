//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace VP.Reports
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class VinPayEntities : DbContext
    {
        public VinPayEntities()
            : base("name=VinPayEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Absenteeism> Absenteeism { get; set; }
        public virtual DbSet<AbsenteeismHistory> AbsenteeismHistories { get; set; }
        public virtual DbSet<AllowanceRelief> AllowanceReliefs { get; set; }
        public virtual DbSet<ApiToken> ApiTokens { get; set; }
        public virtual DbSet<Bank> Banks { get; set; }
        public virtual DbSet<Branch> Branches { get; set; }
        public virtual DbSet<Company> Companies { get; set; }
        public virtual DbSet<CompanyPolicy> CompanyPolicies { get; set; }
        public virtual DbSet<CostCenter> CostCenters { get; set; }
        public virtual DbSet<Country> Countries { get; set; }
        public virtual DbSet<CourseType> CourseTypes { get; set; }
        public virtual DbSet<CurrencyType> CurrencyTypes { get; set; }
        public virtual DbSet<Department> Departments { get; set; }
        public virtual DbSet<EmployeeDesignation> EmployeeDesignations { get; set; }
        public virtual DbSet<EmployeeFinancial> EmployeeFinancials { get; set; }
        public virtual DbSet<EmployeeLeaf> EmployeeLeaves { get; set; }
        public virtual DbSet<EmployeeMonthlyPay> EmployeeMonthlyPays { get; set; }
        public virtual DbSet<EmployeePFA> EmployeePFAs { get; set; }
        public virtual DbSet<EmployeePFALine> EmployeePFALines { get; set; }
        public virtual DbSet<EmployeeQualification> EmployeeQualifications { get; set; }
        public virtual DbSet<Employee> Employees { get; set; }
        public virtual DbSet<Gender> Genders { get; set; }
        public virtual DbSet<GradeType> GradeTypes { get; set; }
        public virtual DbSet<Group> Groups { get; set; }
        public virtual DbSet<GroupsLeave> GroupsLeaves { get; set; }
        public virtual DbSet<GroupsLine> GroupsLines { get; set; }
        public virtual DbSet<JobCategory> JobCategories { get; set; }
        public virtual DbSet<JobCategoryLine> JobCategoryLines { get; set; }
        public virtual DbSet<Language> Languages { get; set; }
        public virtual DbSet<LeaveType> LeaveTypes { get; set; }
        public virtual DbSet<Location> Locations { get; set; }
        public virtual DbSet<MainMenu> MainMenus { get; set; }
        public virtual DbSet<MaritalStatu> MaritalStatus { get; set; }
        public virtual DbSet<NextOfKin> NextOfKins { get; set; }
        public virtual DbSet<PayAnalysi> PayAnalysis { get; set; }
        public virtual DbSet<PaymentBasi> PaymentBasis { get; set; }
        public virtual DbSet<PaymentTypeAttr> PaymentTypeAttrs { get; set; }
        public virtual DbSet<PaymentType> PaymentTypes { get; set; }
        public virtual DbSet<PayOperator> PayOperators { get; set; }
        public virtual DbSet<PayrollPeriod> PayrollPeriods { get; set; }
        public virtual DbSet<PayrollPeriodLine> PayrollPeriodLines { get; set; }
        public virtual DbSet<PayTypesLine> PayTypesLines { get; set; }
        public virtual DbSet<PayTypeStatu> PayTypeStatus { get; set; }
        public virtual DbSet<PFA> PFAs { get; set; }
        public virtual DbSet<QualificationType> QualificationTypes { get; set; }
        public virtual DbSet<Referee> Referees { get; set; }
        public virtual DbSet<RelationshipType> RelationshipTypes { get; set; }
        public virtual DbSet<ReliefType> ReliefTypes { get; set; }
        public virtual DbSet<RoleAccessPermission> RoleAccessPermissions { get; set; }
        public virtual DbSet<Role> Roles { get; set; }
        public virtual DbSet<StandardRelief> StandardReliefs { get; set; }
        public virtual DbSet<State> States { get; set; }
        public virtual DbSet<TaxTable> TaxTables { get; set; }
        public virtual DbSet<TaxTableLine> TaxTableLines { get; set; }
        public virtual DbSet<Title> Titles { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<WorkExperience> WorkExperiences { get; set; }
        public virtual DbSet<YearEmployeePayAnalysi> YearEmployeePayAnalysis { get; set; }
        public virtual DbSet<YearPayAnalysi> YearPayAnalysis { get; set; }
        public virtual DbSet<YearPayFileTaxLine> YearPayFileTaxLines { get; set; }
        public virtual DbSet<PayElementsView> PayElementsViews { get; set; }
        public virtual DbSet<RoleAccessPermissionView> RoleAccessPermissionViews { get; set; }
    
        public virtual int employee_Financials_Defined_Components_Recalc(string company, string branch, string employeeId, string payTypeId, ObjectParameter totalValue, ObjectParameter runStatus)
        {
            var companyParameter = company != null ?
                new ObjectParameter("Company", company) :
                new ObjectParameter("Company", typeof(string));
    
            var branchParameter = branch != null ?
                new ObjectParameter("Branch", branch) :
                new ObjectParameter("Branch", typeof(string));
    
            var employeeIdParameter = employeeId != null ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(string));
    
            var payTypeIdParameter = payTypeId != null ?
                new ObjectParameter("PayTypeId", payTypeId) :
                new ObjectParameter("PayTypeId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("employee_Financials_Defined_Components_Recalc", companyParameter, branchParameter, employeeIdParameter, payTypeIdParameter, totalValue, runStatus);
        }
    
        public virtual int employee_Financials_Defined_Recalc(string company, string branch, string employeeId, ObjectParameter runStatus)
        {
            var companyParameter = company != null ?
                new ObjectParameter("Company", company) :
                new ObjectParameter("Company", typeof(string));
    
            var branchParameter = branch != null ?
                new ObjectParameter("Branch", branch) :
                new ObjectParameter("Branch", typeof(string));
    
            var employeeIdParameter = employeeId != null ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("employee_Financials_Defined_Recalc", companyParameter, branchParameter, employeeIdParameter, runStatus);
        }
    
        public virtual int employee_LoadFinancials(string company, string branch, string employeeId, string mode, ObjectParameter runStatus)
        {
            var companyParameter = company != null ?
                new ObjectParameter("Company", company) :
                new ObjectParameter("Company", typeof(string));
    
            var branchParameter = branch != null ?
                new ObjectParameter("Branch", branch) :
                new ObjectParameter("Branch", typeof(string));
    
            var employeeIdParameter = employeeId != null ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(string));
    
            var modeParameter = mode != null ?
                new ObjectParameter("Mode", mode) :
                new ObjectParameter("Mode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("employee_LoadFinancials", companyParameter, branchParameter, employeeIdParameter, modeParameter, runStatus);
        }
    
        public virtual int Payroll_Allowance_Cacl(string company, string branch, string fiscalYear, string employeeID, Nullable<double> currencyExchangeRate, Nullable<double> grossPay, Nullable<double> transAmount, Nullable<double> timeSheetAmount, Nullable<double> ratableAmount, string reliefType, string taxBasis, Nullable<double> reliefOnGross, Nullable<bool> grossUpNonStatutoryforTax, Nullable<double> reliefRate, Nullable<double> personalAllowance, Nullable<double> disabilityAllowance, Nullable<double> childAllowance, Nullable<double> dependentAllowance, Nullable<double> minimumTaxAmount, Nullable<double> percentAllowanceRelief, Nullable<bool> allStaffRelief, ObjectParameter taxableAmount, ObjectParameter monthlyTaxPerOnePercent, ObjectParameter totalFreePay, ObjectParameter taxableGross, ObjectParameter grossPayForTaxComparison, ObjectParameter postingResult)
        {
            var companyParameter = company != null ?
                new ObjectParameter("Company", company) :
                new ObjectParameter("Company", typeof(string));
    
            var branchParameter = branch != null ?
                new ObjectParameter("Branch", branch) :
                new ObjectParameter("Branch", typeof(string));
    
            var fiscalYearParameter = fiscalYear != null ?
                new ObjectParameter("FiscalYear", fiscalYear) :
                new ObjectParameter("FiscalYear", typeof(string));
    
            var employeeIDParameter = employeeID != null ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(string));
    
            var currencyExchangeRateParameter = currencyExchangeRate.HasValue ?
                new ObjectParameter("CurrencyExchangeRate", currencyExchangeRate) :
                new ObjectParameter("CurrencyExchangeRate", typeof(double));
    
            var grossPayParameter = grossPay.HasValue ?
                new ObjectParameter("GrossPay", grossPay) :
                new ObjectParameter("GrossPay", typeof(double));
    
            var transAmountParameter = transAmount.HasValue ?
                new ObjectParameter("TransAmount", transAmount) :
                new ObjectParameter("TransAmount", typeof(double));
    
            var timeSheetAmountParameter = timeSheetAmount.HasValue ?
                new ObjectParameter("TimeSheetAmount", timeSheetAmount) :
                new ObjectParameter("TimeSheetAmount", typeof(double));
    
            var ratableAmountParameter = ratableAmount.HasValue ?
                new ObjectParameter("RatableAmount", ratableAmount) :
                new ObjectParameter("RatableAmount", typeof(double));
    
            var reliefTypeParameter = reliefType != null ?
                new ObjectParameter("ReliefType", reliefType) :
                new ObjectParameter("ReliefType", typeof(string));
    
            var taxBasisParameter = taxBasis != null ?
                new ObjectParameter("TaxBasis", taxBasis) :
                new ObjectParameter("TaxBasis", typeof(string));
    
            var reliefOnGrossParameter = reliefOnGross.HasValue ?
                new ObjectParameter("ReliefOnGross", reliefOnGross) :
                new ObjectParameter("ReliefOnGross", typeof(double));
    
            var grossUpNonStatutoryforTaxParameter = grossUpNonStatutoryforTax.HasValue ?
                new ObjectParameter("GrossUpNonStatutoryforTax", grossUpNonStatutoryforTax) :
                new ObjectParameter("GrossUpNonStatutoryforTax", typeof(bool));
    
            var reliefRateParameter = reliefRate.HasValue ?
                new ObjectParameter("ReliefRate", reliefRate) :
                new ObjectParameter("ReliefRate", typeof(double));
    
            var personalAllowanceParameter = personalAllowance.HasValue ?
                new ObjectParameter("PersonalAllowance", personalAllowance) :
                new ObjectParameter("PersonalAllowance", typeof(double));
    
            var disabilityAllowanceParameter = disabilityAllowance.HasValue ?
                new ObjectParameter("DisabilityAllowance", disabilityAllowance) :
                new ObjectParameter("DisabilityAllowance", typeof(double));
    
            var childAllowanceParameter = childAllowance.HasValue ?
                new ObjectParameter("ChildAllowance", childAllowance) :
                new ObjectParameter("ChildAllowance", typeof(double));
    
            var dependentAllowanceParameter = dependentAllowance.HasValue ?
                new ObjectParameter("DependentAllowance", dependentAllowance) :
                new ObjectParameter("DependentAllowance", typeof(double));
    
            var minimumTaxAmountParameter = minimumTaxAmount.HasValue ?
                new ObjectParameter("MinimumTaxAmount", minimumTaxAmount) :
                new ObjectParameter("MinimumTaxAmount", typeof(double));
    
            var percentAllowanceReliefParameter = percentAllowanceRelief.HasValue ?
                new ObjectParameter("PercentAllowanceRelief", percentAllowanceRelief) :
                new ObjectParameter("PercentAllowanceRelief", typeof(double));
    
            var allStaffReliefParameter = allStaffRelief.HasValue ?
                new ObjectParameter("AllStaffRelief", allStaffRelief) :
                new ObjectParameter("AllStaffRelief", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Payroll_Allowance_Cacl", companyParameter, branchParameter, fiscalYearParameter, employeeIDParameter, currencyExchangeRateParameter, grossPayParameter, transAmountParameter, timeSheetAmountParameter, ratableAmountParameter, reliefTypeParameter, taxBasisParameter, reliefOnGrossParameter, grossUpNonStatutoryforTaxParameter, reliefRateParameter, personalAllowanceParameter, disabilityAllowanceParameter, childAllowanceParameter, dependentAllowanceParameter, minimumTaxAmountParameter, percentAllowanceReliefParameter, allStaffReliefParameter, taxableAmount, monthlyTaxPerOnePercent, totalFreePay, taxableGross, grossPayForTaxComparison, postingResult);
        }
    
        public virtual int Payroll_Complete(string company, string branch, ObjectParameter runStatus)
        {
            var companyParameter = company != null ?
                new ObjectParameter("Company", company) :
                new ObjectParameter("Company", typeof(string));
    
            var branchParameter = branch != null ?
                new ObjectParameter("Branch", branch) :
                new ObjectParameter("Branch", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Payroll_Complete", companyParameter, branchParameter, runStatus);
        }
    
        public virtual int Payroll_ComputePayTypeItems(string company, string branch, string employeeID, string payTypeID, Nullable<double> frequency, ObjectParameter actualTotalAmount, ObjectParameter postingResult)
        {
            var companyParameter = company != null ?
                new ObjectParameter("Company", company) :
                new ObjectParameter("Company", typeof(string));
    
            var branchParameter = branch != null ?
                new ObjectParameter("Branch", branch) :
                new ObjectParameter("Branch", typeof(string));
    
            var employeeIDParameter = employeeID != null ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(string));
    
            var payTypeIDParameter = payTypeID != null ?
                new ObjectParameter("PayTypeID", payTypeID) :
                new ObjectParameter("PayTypeID", typeof(string));
    
            var frequencyParameter = frequency.HasValue ?
                new ObjectParameter("Frequency", frequency) :
                new ObjectParameter("Frequency", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Payroll_ComputePayTypeItems", companyParameter, branchParameter, employeeIDParameter, payTypeIDParameter, frequencyParameter, actualTotalAmount, postingResult);
        }
    
        public virtual int Payroll_Confirm_Month_To_Roll(string company, string branch, ObjectParameter status, ObjectParameter runStatus)
        {
            var companyParameter = company != null ?
                new ObjectParameter("Company", company) :
                new ObjectParameter("Company", typeof(string));
    
            var branchParameter = branch != null ?
                new ObjectParameter("Branch", branch) :
                new ObjectParameter("Branch", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Payroll_Confirm_Month_To_Roll", companyParameter, branchParameter, status, runStatus);
        }
    
        public virtual int Payroll_Confirm_Period_MonthRun(string company, string branch, ObjectParameter status, ObjectParameter runStatus)
        {
            var companyParameter = company != null ?
                new ObjectParameter("Company", company) :
                new ObjectParameter("Company", typeof(string));
    
            var branchParameter = branch != null ?
                new ObjectParameter("Branch", branch) :
                new ObjectParameter("Branch", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Payroll_Confirm_Period_MonthRun", companyParameter, branchParameter, status, runStatus);
        }
    
        public virtual int Payroll_Confirm_PFA_Default(string company, string branch, ObjectParameter runStatus)
        {
            var companyParameter = company != null ?
                new ObjectParameter("Company", company) :
                new ObjectParameter("Company", typeof(string));
    
            var branchParameter = branch != null ?
                new ObjectParameter("Branch", branch) :
                new ObjectParameter("Branch", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Payroll_Confirm_PFA_Default", companyParameter, branchParameter, runStatus);
        }
    
        public virtual int Payroll_Delete_YearPay(string company, string branch, ObjectParameter runStatus)
        {
            var companyParameter = company != null ?
                new ObjectParameter("Company", company) :
                new ObjectParameter("Company", typeof(string));
    
            var branchParameter = branch != null ?
                new ObjectParameter("Branch", branch) :
                new ObjectParameter("Branch", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Payroll_Delete_YearPay", companyParameter, branchParameter, runStatus);
        }
    
        public virtual int Payroll_EmployeeTaxComputation(string company, string branch, ObjectParameter runStatus)
        {
            var companyParameter = company != null ?
                new ObjectParameter("Company", company) :
                new ObjectParameter("Company", typeof(string));
    
            var branchParameter = branch != null ?
                new ObjectParameter("Branch", branch) :
                new ObjectParameter("Branch", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Payroll_EmployeeTaxComputation", companyParameter, branchParameter, runStatus);
        }
    
        public virtual int Payroll_Get_Period(string company, string branch, ObjectParameter period, ObjectParameter runStatus)
        {
            var companyParameter = company != null ?
                new ObjectParameter("Company", company) :
                new ObjectParameter("Company", typeof(string));
    
            var branchParameter = branch != null ?
                new ObjectParameter("Branch", branch) :
                new ObjectParameter("Branch", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Payroll_Get_Period", companyParameter, branchParameter, period, runStatus);
        }
    
        public virtual int Payroll_Get_WorkDays(string company, string branch, string employeeID, ObjectParameter totalWorkDays, ObjectParameter requiredWorkDays, ObjectParameter postingResult)
        {
            var companyParameter = company != null ?
                new ObjectParameter("Company", company) :
                new ObjectParameter("Company", typeof(string));
    
            var branchParameter = branch != null ?
                new ObjectParameter("Branch", branch) :
                new ObjectParameter("Branch", typeof(string));
    
            var employeeIDParameter = employeeID != null ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Payroll_Get_WorkDays", companyParameter, branchParameter, employeeIDParameter, totalWorkDays, requiredWorkDays, postingResult);
        }
    
        public virtual int Payroll_GetPayType_info(string company, string branch, string payTypeID, ObjectParameter description, ObjectParameter operatorID, ObjectParameter attrID, ObjectParameter conversionRate, ObjectParameter employeeRate, ObjectParameter employerRate, ObjectParameter onPayroll, ObjectParameter postingResult)
        {
            var companyParameter = company != null ?
                new ObjectParameter("Company", company) :
                new ObjectParameter("Company", typeof(string));
    
            var branchParameter = branch != null ?
                new ObjectParameter("Branch", branch) :
                new ObjectParameter("Branch", typeof(string));
    
            var payTypeIDParameter = payTypeID != null ?
                new ObjectParameter("PayTypeID", payTypeID) :
                new ObjectParameter("PayTypeID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Payroll_GetPayType_info", companyParameter, branchParameter, payTypeIDParameter, description, operatorID, attrID, conversionRate, employeeRate, employerRate, onPayroll, postingResult);
        }
    
        public virtual int Payroll_Insert_Absenteeism_History(string company, string branch, ObjectParameter status, ObjectParameter runStatus)
        {
            var companyParameter = company != null ?
                new ObjectParameter("Company", company) :
                new ObjectParameter("Company", typeof(string));
    
            var branchParameter = branch != null ?
                new ObjectParameter("Branch", branch) :
                new ObjectParameter("Branch", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Payroll_Insert_Absenteeism_History", companyParameter, branchParameter, status, runStatus);
        }
    
        public virtual int Payroll_InsertEmployee_PFA_Computation(string company, string branch, string payTypeID, Nullable<double> employeePerc, Nullable<double> employerPerc, ObjectParameter postingResult)
        {
            var companyParameter = company != null ?
                new ObjectParameter("Company", company) :
                new ObjectParameter("Company", typeof(string));
    
            var branchParameter = branch != null ?
                new ObjectParameter("Branch", branch) :
                new ObjectParameter("Branch", typeof(string));
    
            var payTypeIDParameter = payTypeID != null ?
                new ObjectParameter("PayTypeID", payTypeID) :
                new ObjectParameter("PayTypeID", typeof(string));
    
            var employeePercParameter = employeePerc.HasValue ?
                new ObjectParameter("EmployeePerc", employeePerc) :
                new ObjectParameter("EmployeePerc", typeof(double));
    
            var employerPercParameter = employerPerc.HasValue ?
                new ObjectParameter("EmployerPerc", employerPerc) :
                new ObjectParameter("EmployerPerc", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Payroll_InsertEmployee_PFA_Computation", companyParameter, branchParameter, payTypeIDParameter, employeePercParameter, employerPercParameter, postingResult);
        }
    
        public virtual int Payroll_InsertPFA_Computation(string company, string branch, ObjectParameter runStatus)
        {
            var companyParameter = company != null ?
                new ObjectParameter("Company", company) :
                new ObjectParameter("Company", typeof(string));
    
            var branchParameter = branch != null ?
                new ObjectParameter("Branch", branch) :
                new ObjectParameter("Branch", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Payroll_InsertPFA_Computation", companyParameter, branchParameter, runStatus);
        }
    
        public virtual int Payroll_InsertYearPayAnalysis(string company, string branch, ObjectParameter runStatus)
        {
            var companyParameter = company != null ?
                new ObjectParameter("Company", company) :
                new ObjectParameter("Company", typeof(string));
    
            var branchParameter = branch != null ?
                new ObjectParameter("Branch", branch) :
                new ObjectParameter("Branch", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Payroll_InsertYearPayAnalysis", companyParameter, branchParameter, runStatus);
        }
    
        public virtual int Payroll_InsertYearPayFileDetail(string company, string branch, ObjectParameter runStatus)
        {
            var companyParameter = company != null ?
                new ObjectParameter("Company", company) :
                new ObjectParameter("Company", typeof(string));
    
            var branchParameter = branch != null ?
                new ObjectParameter("Branch", branch) :
                new ObjectParameter("Branch", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Payroll_InsertYearPayFileDetail", companyParameter, branchParameter, runStatus);
        }
    
        public virtual int Payroll_MasterRecord_Computation(string company, string branch, string employeeID, ObjectParameter runStatus)
        {
            var companyParameter = company != null ?
                new ObjectParameter("Company", company) :
                new ObjectParameter("Company", typeof(string));
    
            var branchParameter = branch != null ?
                new ObjectParameter("Branch", branch) :
                new ObjectParameter("Branch", typeof(string));
    
            var employeeIDParameter = employeeID != null ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Payroll_MasterRecord_Computation", companyParameter, branchParameter, employeeIDParameter, runStatus);
        }
    
        public virtual int Payroll_MasterRecordComputation(string company, string branch, string employeeID, ObjectParameter runStatus)
        {
            var companyParameter = company != null ?
                new ObjectParameter("Company", company) :
                new ObjectParameter("Company", typeof(string));
    
            var branchParameter = branch != null ?
                new ObjectParameter("Branch", branch) :
                new ObjectParameter("Branch", typeof(string));
    
            var employeeIDParameter = employeeID != null ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Payroll_MasterRecordComputation", companyParameter, branchParameter, employeeIDParameter, runStatus);
        }
    
        public virtual int Payroll_Month_Rollover_Complete(string company, string branch, ObjectParameter status, ObjectParameter runStatus)
        {
            var companyParameter = company != null ?
                new ObjectParameter("Company", company) :
                new ObjectParameter("Company", typeof(string));
    
            var branchParameter = branch != null ?
                new ObjectParameter("Branch", branch) :
                new ObjectParameter("Branch", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Payroll_Month_Rollover_Complete", companyParameter, branchParameter, status, runStatus);
        }
    
        public virtual int Payroll_OperatorAmount_Calc(string company, string branch, string operatorID, Nullable<double> amountOld, Nullable<double> amountNew, ObjectParameter totalAmount, ObjectParameter postingResult)
        {
            var companyParameter = company != null ?
                new ObjectParameter("Company", company) :
                new ObjectParameter("Company", typeof(string));
    
            var branchParameter = branch != null ?
                new ObjectParameter("Branch", branch) :
                new ObjectParameter("Branch", typeof(string));
    
            var operatorIDParameter = operatorID != null ?
                new ObjectParameter("OperatorID", operatorID) :
                new ObjectParameter("OperatorID", typeof(string));
    
            var amountOldParameter = amountOld.HasValue ?
                new ObjectParameter("AmountOld", amountOld) :
                new ObjectParameter("AmountOld", typeof(double));
    
            var amountNewParameter = amountNew.HasValue ?
                new ObjectParameter("AmountNew", amountNew) :
                new ObjectParameter("AmountNew", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Payroll_OperatorAmount_Calc", companyParameter, branchParameter, operatorIDParameter, amountOldParameter, amountNewParameter, totalAmount, postingResult);
        }
    
        public virtual int Payroll_OtherTax_Computation(string company, string branch, string employeeID, ObjectParameter taxableGrossOthers, ObjectParameter taxableGrossOthersTrans, ObjectParameter taxableGrossOthersTimeSheet, ObjectParameter postingResult)
        {
            var companyParameter = company != null ?
                new ObjectParameter("Company", company) :
                new ObjectParameter("Company", typeof(string));
    
            var branchParameter = branch != null ?
                new ObjectParameter("Branch", branch) :
                new ObjectParameter("Branch", typeof(string));
    
            var employeeIDParameter = employeeID != null ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Payroll_OtherTax_Computation", companyParameter, branchParameter, employeeIDParameter, taxableGrossOthers, taxableGrossOthersTrans, taxableGrossOthersTimeSheet, postingResult);
        }
    
        public virtual int Payroll_OtherTaxes(string company, string branch, string employeeID, ObjectParameter taxableGrossOthers, ObjectParameter postingResult)
        {
            var companyParameter = company != null ?
                new ObjectParameter("Company", company) :
                new ObjectParameter("Company", typeof(string));
    
            var branchParameter = branch != null ?
                new ObjectParameter("Branch", branch) :
                new ObjectParameter("Branch", typeof(string));
    
            var employeeIDParameter = employeeID != null ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Payroll_OtherTaxes", companyParameter, branchParameter, employeeIDParameter, taxableGrossOthers, postingResult);
        }
    
        public virtual int Payroll_Taxable_Pay_Ded(string company, string branch, string employeeID, ObjectParameter grossPay, ObjectParameter transAmount, ObjectParameter timeSheetAmount, ObjectParameter ratableAmount, ObjectParameter postingResult)
        {
            var companyParameter = company != null ?
                new ObjectParameter("Company", company) :
                new ObjectParameter("Company", typeof(string));
    
            var branchParameter = branch != null ?
                new ObjectParameter("Branch", branch) :
                new ObjectParameter("Branch", typeof(string));
    
            var employeeIDParameter = employeeID != null ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Payroll_Taxable_Pay_Ded", companyParameter, branchParameter, employeeIDParameter, grossPay, transAmount, timeSheetAmount, ratableAmount, postingResult);
        }
    
        public virtual int Payroll_Taxable_Pay_Ded_PayrollHRPayrollPayElementsDetail(string company, string branch, string employeeID, ObjectParameter grossPay, ObjectParameter postingResult)
        {
            var companyParameter = company != null ?
                new ObjectParameter("Company", company) :
                new ObjectParameter("Company", typeof(string));
    
            var branchParameter = branch != null ?
                new ObjectParameter("Branch", branch) :
                new ObjectParameter("Branch", typeof(string));
    
            var employeeIDParameter = employeeID != null ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Payroll_Taxable_Pay_Ded_PayrollHRPayrollPayElementsDetail", companyParameter, branchParameter, employeeIDParameter, grossPay, postingResult);
        }
    
        public virtual int Payroll_TaxCalculator(string company, string branch, string taxFiscalYear, string pAYEState, string currencyID, Nullable<double> taxableAmount, ObjectParameter pAYE, ObjectParameter postingResult)
        {
            var companyParameter = company != null ?
                new ObjectParameter("Company", company) :
                new ObjectParameter("Company", typeof(string));
    
            var branchParameter = branch != null ?
                new ObjectParameter("Branch", branch) :
                new ObjectParameter("Branch", typeof(string));
    
            var taxFiscalYearParameter = taxFiscalYear != null ?
                new ObjectParameter("TaxFiscalYear", taxFiscalYear) :
                new ObjectParameter("TaxFiscalYear", typeof(string));
    
            var pAYEStateParameter = pAYEState != null ?
                new ObjectParameter("PAYEState", pAYEState) :
                new ObjectParameter("PAYEState", typeof(string));
    
            var currencyIDParameter = currencyID != null ?
                new ObjectParameter("CurrencyID", currencyID) :
                new ObjectParameter("CurrencyID", typeof(string));
    
            var taxableAmountParameter = taxableAmount.HasValue ?
                new ObjectParameter("TaxableAmount", taxableAmount) :
                new ObjectParameter("TaxableAmount", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Payroll_TaxCalculator", companyParameter, branchParameter, taxFiscalYearParameter, pAYEStateParameter, currencyIDParameter, taxableAmountParameter, pAYE, postingResult);
        }
    
        public virtual int Payroll_Update_Last_Pay_Date(string company, string branch, ObjectParameter status, ObjectParameter runStatus)
        {
            var companyParameter = company != null ?
                new ObjectParameter("Company", company) :
                new ObjectParameter("Company", typeof(string));
    
            var branchParameter = branch != null ?
                new ObjectParameter("Branch", branch) :
                new ObjectParameter("Branch", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Payroll_Update_Last_Pay_Date", companyParameter, branchParameter, status, runStatus);
        }
    
        public virtual int Payroll_Validate_Employee_Financials(string company, string branch, ObjectParameter status, ObjectParameter runStatus)
        {
            var companyParameter = company != null ?
                new ObjectParameter("Company", company) :
                new ObjectParameter("Company", typeof(string));
    
            var branchParameter = branch != null ?
                new ObjectParameter("Branch", branch) :
                new ObjectParameter("Branch", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Payroll_Validate_Employee_Financials", companyParameter, branchParameter, status, runStatus);
        }
    
        public virtual int Payroll_Validate_Employee_SplitPay(string company, string branch, ObjectParameter status, ObjectParameter runStatus)
        {
            var companyParameter = company != null ?
                new ObjectParameter("Company", company) :
                new ObjectParameter("Company", typeof(string));
    
            var branchParameter = branch != null ?
                new ObjectParameter("Branch", branch) :
                new ObjectParameter("Branch", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Payroll_Validate_Employee_SplitPay", companyParameter, branchParameter, status, runStatus);
        }
    }
}
